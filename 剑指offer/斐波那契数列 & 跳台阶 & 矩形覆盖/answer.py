# coding:utf-8
"""
斐波那契数列 与 跳台阶 同属一类问题
区别只是起始点的不同
斐波那契数列：
0 1 2 3 4 5 6 7
0 1 1 2 3 5 8 13

跳台阶：
1 2 3 4 5 6
1 2 3 5 8 13

矩形覆盖
0 1 2 3 4 5
0 1 2 3 5 8
"""


def fib1(n):
    # 斐波那契数列 递归版
    if n<2:
        return n
    return fib1(n-1) + fib1(n-2)


def fib2(n):
    # 斐波那契数列 非递归版
    # 某一项值只与前两项值有关，故使用交替叠加法
    list1 = [0, 1]
    while n > 0:
        list1[0], list1[1] = list1[1], list1[0]+list1[1]
    return list1[0]


def step1(n):
    # 跳台阶 递归版
    """
    一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法
    """
    if n <= 2:
        return n
    return step1(n-1) + step1(n-2)


def step2(n):
    # 跳台阶 非递归版
    list1 = [1, 1]
    while n > 0:
        list1[0], list1[1] = list1[1], list1[0]+list1[1]
    return list1[0]


def step3(n):
    # 变态版跳台阶问题
    """
    一只青蛙一次可以跳上1级台阶，也可以跳上2级....也可以跳上n级.求该青蛙跳上一个n级的台阶总共有多少种跳法
    f(1) = 1
    f(2) 会有两个跳得方式，一次1阶或者2阶，这回归到了问题f(1),f(2) = f(2-1) + f(2-2)
    f(3) 会有三种跳得方式，1阶、2阶、3阶，那么就是第一次跳出1阶后面剩下：f(3-1);第一次跳出2阶，
         剩下f(3-2)；第一次3阶，那么剩下f(3-3).因此结论是
    f(3) = f(3-1)+f(3-2)+f(3-3)
    f(n)时，会有n中跳的方式，1阶、2阶...n阶，得出结论：
    f(n) = f(n-1)+f(n-2)+...+f(n-(n-1)) + f(n-n)
    => f(0) + f(1) + f(2) + f(3) + ... + f(n-1) == f(n) = 2*f(n-1)
    """
    if n <= 2:
        return n
    return 2*step3(n-1)

def rectCover(n):
    # 矩形覆盖
    """
    我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。
    请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法
    F(0) = 0
    F(1) = 1
    F(2) = 2
    F(n) = F(n-1) + F(n-2) n>2
    """
    if n <1:
        return 0
    list1 = [1,1]
    while n >0:
        list1[0], list1[1] = list1[1], list1[0]+list1[1]
        n-=1
    return list1[0]



